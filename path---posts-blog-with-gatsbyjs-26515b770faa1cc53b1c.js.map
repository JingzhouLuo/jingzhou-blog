{"version":3,"sources":["webpack:///path---posts-blog-with-gatsbyjs-26515b770faa1cc53b1c.js","webpack:///./.cache/json/posts-blog-with-gatsbyjs.json"],"names":["webpackJsonp","361","module","exports","data","site","siteMetadata","title","subtitle","copyright","author","name","twitter","markdownRemark","id","html","fields","tagSlugs","frontmatter","tags","date","description","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,uBAAAC,SAAA,8DAAAC,UAAA,yBAAAC,QAAuJC,KAAA,eAAAC,QAAA,kBAAiDC,gBAAmBC,GAAA,oIAAAC,KAAA,q3EAAAC,QAAyhFC,UAAA,qDAAgEC,aAAgBX,MAAA,qBAAAY,MAAA,+BAAAC,KAAA,2BAAAC,YAAA,oPAAuWC,aAAgBC,KAAA","file":"path---posts-blog-with-gatsbyjs-26515b770faa1cc53b1c.js","sourcesContent":["webpackJsonp([208531386337297],{\n\n/***/ 361:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Blog by Jingzhou Luo\",\"subtitle\":\"Also go by Joe. Software Engineer, Seahawk Fan, Spicy Foody\",\"copyright\":\"© All rights reserved.\",\"author\":{\"name\":\"Jingzhou Luo\",\"twitter\":\"@JingzhouLuo\"}}},\"markdownRemark\":{\"id\":\"/Users/jingzhou/repos/jingzhou-blog/src/pages/articles/2018-02-16--blog-with-gatsbyjs/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>This blog is focused on parts not introduced in Gatsbyjs official tutorial. For Gatsbyjs, the official doc is very informative.</p>\\n<h2>Choose the Starter</h2>\\n<p>Gatsbyjs has a few official starters and 3rd party starters. These starters serve the purpose of\\nscafolding and quick start. I chose this one called <a href=\\\"https://github.com/alxshelepenok/gatsby-starter-lumen\\\">lumen</a>.</p>\\n<h2>Using the Starter to start</h2>\\n<p>Run <code>gatsby new project-name https://github.com/alxshelepenok/gatsby-starter-lumen</code>.\\nThis creates an folder called project-name locally. You should create an github repo called project-name in github.\\nAlso set up git in your project with <code>git init</code>. Then tell Gatsby where to deploy your site by adding the git remote address with https or ssh. Here is how to do it with https: <code>git remote add origin git@github.com:username/project-name.git</code>.</p>\\n<h2>Make it deployable to Github Pages</h2>\\n<p>First add gh-pages as a devDependency of your site by running <code>npm install gh-pages --save-dev</code>.\\nSecondly create an CNAME file containing your customized domain name.\\nThen create an npm script to deploy your project by adding following into <code>package.json</code>. </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>\\\"deploy\\\": \\\"gatsby build && cp ./CNAME public/ && gh-pages -d public\\\"</code></pre>\\n      </div>\\n<p>Now run npm run deploy. Preview changes in your GitHub page <code>https://username.github.io/project-name/</code>. You can also find the link to your site on GitHub under Settings > GitHub Pages.</p>\\n<h2>Configure your DNS</h2>\\n<p>If you are using customized domain name, you need to point your domain name to the github page. You need to create\\nan CNAME entry with name as WWW and value is your github page domain (ex: jingzhouluo.github.io). Note this should be the root of your github page.</p>\\n<p>To configure the apex domain (The ones without www), you need to create two A type entry with @ as name <code>192.30.252.153</code> and <code>192.30.252.154</code> as value.</p>\\n<h2>Deploy</h2>\\n<p>After running <code>npm run deploy</code>, you will notice there are two branches created. Do not manually change the gh-pages branch, always update the master branch and run the deploy command. That gh-pages branch will be updated automatically. It is served as the release branch.</p>\",\"fields\":{\"tagSlugs\":[\"/tags/frontend/\",\"/tags/gatsbyjs/\",\"/tags/react/\"]},\"frontmatter\":{\"title\":\"Blog with Gatsbyjs\",\"tags\":[\"frontend\",\"gatsbyjs\",\"react\"],\"date\":\"2018-02-18T17:48:00.000Z\",\"description\":\"Gatsbyjs is a new static site generator. It features reactjs, graphql and many more  modern frontend best practices. It's a perfect framework for creating blogs. This article is to summarize how this blog is created within this framework.\"}}},\"pathContext\":{\"slug\":\"/posts/blog-with-gatsbyjs/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---posts-blog-with-gatsbyjs-26515b770faa1cc53b1c.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Blog by Jingzhou Luo\",\"subtitle\":\"Also go by Joe. Software Engineer, Seahawk Fan, Spicy Foody\",\"copyright\":\"© All rights reserved.\",\"author\":{\"name\":\"Jingzhou Luo\",\"twitter\":\"@JingzhouLuo\"}}},\"markdownRemark\":{\"id\":\"/Users/jingzhou/repos/jingzhou-blog/src/pages/articles/2018-02-16--blog-with-gatsbyjs/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>This blog is focused on parts not introduced in Gatsbyjs official tutorial. For Gatsbyjs, the official doc is very informative.</p>\\n<h2>Choose the Starter</h2>\\n<p>Gatsbyjs has a few official starters and 3rd party starters. These starters serve the purpose of\\nscafolding and quick start. I chose this one called <a href=\\\"https://github.com/alxshelepenok/gatsby-starter-lumen\\\">lumen</a>.</p>\\n<h2>Using the Starter to start</h2>\\n<p>Run <code>gatsby new project-name https://github.com/alxshelepenok/gatsby-starter-lumen</code>.\\nThis creates an folder called project-name locally. You should create an github repo called project-name in github.\\nAlso set up git in your project with <code>git init</code>. Then tell Gatsby where to deploy your site by adding the git remote address with https or ssh. Here is how to do it with https: <code>git remote add origin git@github.com:username/project-name.git</code>.</p>\\n<h2>Make it deployable to Github Pages</h2>\\n<p>First add gh-pages as a devDependency of your site by running <code>npm install gh-pages --save-dev</code>.\\nSecondly create an CNAME file containing your customized domain name.\\nThen create an npm script to deploy your project by adding following into <code>package.json</code>. </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>\\\"deploy\\\": \\\"gatsby build && cp ./CNAME public/ && gh-pages -d public\\\"</code></pre>\\n      </div>\\n<p>Now run npm run deploy. Preview changes in your GitHub page <code>https://username.github.io/project-name/</code>. You can also find the link to your site on GitHub under Settings > GitHub Pages.</p>\\n<h2>Configure your DNS</h2>\\n<p>If you are using customized domain name, you need to point your domain name to the github page. You need to create\\nan CNAME entry with name as WWW and value is your github page domain (ex: jingzhouluo.github.io). Note this should be the root of your github page.</p>\\n<p>To configure the apex domain (The ones without www), you need to create two A type entry with @ as name <code>192.30.252.153</code> and <code>192.30.252.154</code> as value.</p>\\n<h2>Deploy</h2>\\n<p>After running <code>npm run deploy</code>, you will notice there are two branches created. Do not manually change the gh-pages branch, always update the master branch and run the deploy command. That gh-pages branch will be updated automatically. It is served as the release branch.</p>\",\"fields\":{\"tagSlugs\":[\"/tags/frontend/\",\"/tags/gatsbyjs/\",\"/tags/react/\"]},\"frontmatter\":{\"title\":\"Blog with Gatsbyjs\",\"tags\":[\"frontend\",\"gatsbyjs\",\"react\"],\"date\":\"2018-02-18T17:48:00.000Z\",\"description\":\"Gatsbyjs is a new static site generator. It features reactjs, graphql and many more  modern frontend best practices. It's a perfect framework for creating blogs. This article is to summarize how this blog is created within this framework.\"}}},\"pathContext\":{\"slug\":\"/posts/blog-with-gatsbyjs/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/posts-blog-with-gatsbyjs.json\n// module id = 361\n// module chunks = 208531386337297"],"sourceRoot":""}